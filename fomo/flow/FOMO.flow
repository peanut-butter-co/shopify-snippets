0c78fc70ba4e1c4d761ec17a11b7de336e91440483b8abcc697164e8dc93c136:{"__metadata":{"version":0.1},"root":{"steps":[{"step_id":"2a5c64f0-0fb9-11f0-ba43-8fc37564b334","step_position":[-340,0],"config_field_values":[],"task_id":"shopify::admin::order_created","task_version":"0.1","task_type":"TRIGGER","description":null,"note":null,"name":null},{"step_id":"3277e510-0fb9-11f0-ba43-8fc37564b334","step_position":[360,0],"config_field_values":[{"config_field_id":"input","value":"query{\n  shop{\n    name\n    timezoneOffsetMinutes\n  }\n  order{\n    createdAt\n    lineItems{\n      product{\n        id\n        title\n        legacyResourceId\n        fomoSales{\n          value\n        }\n      }\n      quantity\n    }\n  }\n}"},{"config_field_id":"script","value":"export default function main(input) {\n  console.log(input.shop)\n  function roundToNextQuarter(date) {\n    const d = new Date(date);\n    const minutes = d.getMinutes();\n    const roundedMinutes = Math.ceil(minutes / 15) * 15;\n    \n    // Add the rounded minutes difference\n    d.setMinutes(roundedMinutes);\n    \n    // If we rounded to 60, we need to handle the hour rollover\n    if (roundedMinutes === 60) {\n      d.setMinutes(0);\n      d.setHours(d.getHours() + 1);\n    }\n    \n    // Format as yyyymmddhhmm\n    const year = d.getFullYear();\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const day = String(d.getDate()).padStart(2, '0');\n    const hours = String(d.getHours()).padStart(2, '0');\n    const mins = String(d.getMinutes()).padStart(2, '0');\n    \n    return `${year}${month}${day}${hours}${mins}`;\n  }\n  \n  function removeOldSales(currentSales, currentDate) {\n    // Convert currentDate string back to Date for comparison\n    const cutOffDate = new Date(currentDate);\n    cutOffDate.setHours(cutOffDate.getHours() - 24);\n    const cutOffDateString = roundToNextQuarter(cutOffDate);\n\n    // Filter sales based on date string comparison\n    // Also check if date format is valid\n    const newSales = currentSales.filter(sale =>\n      /^\\d{12}$/.test(sale.date) && sale.date >= cutOffDateString\n    );\n    return newSales;\n  }\n  \n  let currentDate = new Date(input.order.createdAt);\n  const timezoneOffset = input.shop.timezoneOffsetMinutes * 60000;\n  currentDate = new Date(currentDate.getTime() + timezoneOffset);\n  console.log('Current Date/Time:', currentDate);\n\n  const updates = {};\n\n  for (const lineItem of input.order.lineItems || []) {\n    console.log(`------- ${lineItem.product.title} ---------`);\n    // Skip POS Custom Sales\n    if (!lineItem.product || !lineItem.product.legacyResourceId) {\n      console.log('Skipping line item due to missing product data:', lineItem);\n      continue;\n    }\n\n    const legacyResourceId = lineItem.product.legacyResourceId;\n\n    let metafieldValue = lineItem.product.fomoSales?.value;\n    metafieldValue = metafieldValue ? JSON.parse(metafieldValue) : [];\n    if (metafieldValue.length) {\n      metafieldValue = removeOldSales(metafieldValue, currentDate);\n    }\n\n    if (updates[legacyResourceId]) {\n      updates[legacyResourceId].quantity += lineItem.quantity;\n    } else {\n      updates[legacyResourceId] = {\n        quantity: lineItem.quantity,\n        metafieldValue: metafieldValue\n      };\n    }\n  }\n\n  console.log('Updates:', updates);\n\n  const newSalesData = [];\n  for (const legacyResourceId in updates) {\n    if (!Object.prototype.hasOwnProperty.call(updates, legacyResourceId)) continue;\n\n    let productSales = updates[legacyResourceId].metafieldValue;\n\n    // Ensure productSales is an array before using push()\n    productSales = Array.isArray(productSales) ? productSales : [];\n\n    const newDate = roundToNextQuarter(currentDate);\n    const existingSaleIndex = productSales.findIndex(sale => sale.date === newDate);\n\n    if (existingSaleIndex !== -1) {\n      // If we found an existing sale for this date, add the quantities\n      productSales[existingSaleIndex].quantity += updates[legacyResourceId].quantity;\n    } else {\n      // If no existing sale for this date, create a new entry\n      productSales.push({\n        date: newDate,\n        quantity: updates[legacyResourceId].quantity\n      });\n    }\n\n    newSalesData.push({\n      productSales,\n      productSalesString: JSON.stringify(productSales),\n      legacyResourceId\n    });\n  }\n\n  console.log('New Sales Data:', newSalesData);\n\n  return {\n    newSalesData: newSalesData\n  };\n}"},{"config_field_id":"output_schema","value":"\"The output of Run Code\"\n\ntype ProductSale {\n  date: Int!,\n  quantity: Int!\n}\n\ntype ProductSalesData {\n  legacyResourceId: Int!,\n  productSalesString: String!\n  productSales: [ProductSale]!\n}\n\ntype Output {\n  \"The array returned by the script\"\n  newSalesData: [ProductSalesData!]\n}"}],"task_id":"shopify::flow::run_code","task_version":"0.1","task_type":"ACTION","description":null,"note":null,"name":"Run code"},{"step_id":"31bd6750-0fbc-11f0-ba43-8fc37564b334","step_position":[720,0],"config_field_values":[{"config_field_id":"listpath","value":"runCode.newSalesData"}],"task_id":"shopify::flow::foreach","task_version":"0.1","task_type":"FOREACH","description":null,"note":null,"name":null},{"step_id":"dc2fbdf0-0fbc-11f0-ba43-8fc37564b334","step_position":[20,0],"config_field_values":[{"config_field_id":"message","value":"{% for lineItems_item in order.lineItems %}\n  {{lineItems_item.product.fomoSales.value}}\n{% endfor %}"}],"task_id":"shopify::flow::print","task_version":"0.1","task_type":"ACTION","description":null,"note":null,"name":null},{"step_id":"0c4609e0-0fd6-11f0-ba16-3d2deeec3b2d","step_position":[1120,20],"config_field_values":[{"config_field_id":"api_call","value":"{\"name\":\"productUpdate\",\"blob\":\"{% liquid\\n  assign total_sales = 0\\n  for productSales_item in newSalesDataForeachitem.productSales\\n    assign total_sales = total_sales | plus: productSales_item.quantity\\n  endfor\\n%}\\n\\n{\\n  \\\"input\\\": {\\n    \\\"id\\\": \\\"gid://shopify/Product/{{newSalesDataForeachitem.legacyResourceId}}\\\",\\n    \\\"metafields\\\": [\\n      {\\n        \\\"namespace\\\": \\\"fomo\\\",\\n        \\\"key\\\": \\\"sales\\\",\\n        \\\"value\\\": \\\"{{newSalesDataForeachitem.productSalesString | replace: '\\\"', '\\\\\\\"'}}\\\",\\n        \\\"type\\\": \\\"json\\\"\\n      },\\n      {\\n        \\\"namespace\\\": \\\"fomo\\\",\\n        \\\"key\\\": \\\"total_units_sold\\\",\\n        \\\"value\\\": \\\"{{ total_sales }}\\\",\\n        \\\"type\\\": \\\"number_integer\\\"\\n      }\\n    ]\\n  }\\n}\"}"}],"task_id":"shopify::admin::admin_api_operation","task_version":"0.1","task_type":"ACTION","description":null,"note":null,"name":"Send Admin API request"}],"links":[{"from_step_id":"3277e510-0fb9-11f0-ba43-8fc37564b334","from_port_id":"output","to_step_id":"31bd6750-0fbc-11f0-ba43-8fc37564b334","to_port_id":"input"},{"from_step_id":"2a5c64f0-0fb9-11f0-ba43-8fc37564b334","from_port_id":"output","to_step_id":"dc2fbdf0-0fbc-11f0-ba43-8fc37564b334","to_port_id":"input"},{"from_step_id":"dc2fbdf0-0fbc-11f0-ba43-8fc37564b334","from_port_id":"output","to_step_id":"3277e510-0fb9-11f0-ba43-8fc37564b334","to_port_id":"input"},{"from_step_id":"31bd6750-0fbc-11f0-ba43-8fc37564b334","from_port_id":"loop_body","to_step_id":"0c4609e0-0fd6-11f0-ba16-3d2deeec3b2d","to_port_id":"input"}],"patched_fields":[{"id":"0195f820-051e-7408-aca4-4b902c304c9b","handle":"fomoSales","field":"metafield","patched_type":"Product","arguments":"{\"key\":\"sales\",\"namespace\":\"fomo\"}","merchant_configured":true},{"id":"0195f820-051e-7b6a-ab32-8d5acce7f3a8","handle":"productRatingCount","field":"metafield","patched_type":"Product","arguments":"{\"key\":\"rating_count\",\"namespace\":\"reviews\"}","merchant_configured":true}],"workflow_name":"FOMO"}}